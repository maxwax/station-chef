#!/bin/bash
# THIS FILE DEPLOYED VIA CHEF 'station' cookbook

#
# Bootstrap a node in my maxlab home lab
#
# This is not generic code, but code to make it quick and easy for me to
# bootstrap a node in my homelab with Chef and deploy services
#
#

VERSION="1.3.1"
VERSION_DATE="2022-0203"

function usage {
  echo "bootstrap-maxlab - Bootstrap a node in the maxlab home lab."
  echo
  echo "Syntax: "
  echo "bootstrap-maxlab --policy-group <policy-group> --policy-name <policy-name> <HOSTNAME>"
  echo
}

# COMMAND LINE PARAMETERS
ENVIRONMENT=""
POLICY_GROUP_NAME=""
POLICY_NAME=""

# Global scope variables
ENVIRONMENT_DEFINED=false
POLICY_GROUP_DEFINED=false
POLICY_NAME_DEFINED=false

# IP OF TARGET, RESOLVED USING 'host' command on host name
HOST_IP=""

# My personal lab key
SSH_KEY="/home/maxwell/.ssh/maxwell-lab"

# Result code after trying to use ssh-copy-id to deploy an SSH key to target
SSH_ERROR=0

#
# Functions
#

# Verify that the hostname provided has a valid IP
function check_hostname {
  host $NODE_NAME > /dev/null 2>&1
  if [[ $? != 0 ]]
  then
    echo "Error: $1 does not appear to be a recognized FQDN"
    exit 1
  else
    HOST_IP=$(host tux.org | grep "has address" | awk '{print $4}')
  fi
}

# Verify that user has provided an environment, policy group and policy name
function require_env_policy_group_and_name {
  if [[ $POLICY_GROUP_DEFINED == false ]] || [[ $POLICY_NAME_DEFINED == false ]] || [[ $ENVIRONMENT_DEFINED == false ]]
  then
    if [[ $POLICY_GROUP_DEFINED == false ]]
    then
      echo "Error: No policy group defined."
    fi
    if [[ $POLICY_NAME_DEFINED == false ]]
    then
      echo "Error: No policy name defined."
    fi
    if [[ $POLICY_NAME_DEFINED == false ]]
    then
      echo "Error: No environment defined."
    fi
    echo "Error: You must define an environment, policy group, and policy name."
    exit 1
  fi
}

# Remove existing SSH keys for this node's IP (created before VM was rebuilt)
function offer_clear_known_hosts {
  if [[ ! -z ${HOST_IP} ]]
  then
    echo
    KNOWN_HOSTS_COUNT=$(egrep "$NODE_NAME|$HOST_IP" $HOME/.ssh/known_hosts | wc -l)
    if [[ $KNOWN_HOSTS_COUNT -gt 0 ]]
    then
      ERASE_YESNO="n"
      echo
      read -p "Erase existing entries in known_hosts for ${NODE_NAME} and ${HOST_IP}?" ERASE_YESNO

      if [[ $ERASE_YESNO == "y" || $ERASE_YESNO == "yes" ]]
      then
        echo "Removing old entries for this host in $HOME/.ssh/known_hosts"
        sed -i 's/^.*'"${HOST_IP}"'.*$//g' $HOME/.ssh/known_hosts
        sed -i 's/^.*'"${NODE_NAME}"'.*$//g' $HOME/.ssh/known_hosts
        echo
      fi
    fi
  fi
}

function offer_clear_chef_objects {
  echo
  echo "Checking for existing Chef server node and client objects"
  echo
  NODE_SHOW_TEST=$(santoku maxlab node show ${NODE_NAME} > /dev/null 2>&1)
  RESULT=$?
  if [[ $RESULT == 0 ]]
  then

    # Delete existing node and client objects,
    # remove existing SSH key from $HOME/known_hosts file
    read -p "Would you like to erase ${NODE_NAME} NODE & CLIENT objects?" ERASE_YESNO
    if [[ $ERASE_YESNO == "y" || $ERASE_YESNO == "yes" ]]
    then
      echo "Deleting old Chef server node object for ${NODE_NAME}"
      santoku maxlab node delete ${NODE_NAME} --yes
      echo "Deleting old Chef server client object for ${NODE_NAME}"
      santoku maxlab client delete ${NODE_NAME} --yes
      echo
    fi
  fi
}

function deploy_root_ssh_key {
  # Deploy personal SSH key
  ssh-copy-id -i $SSH_KEY root@${NODE_NAME}
  SSH_ERROR=$?
}

#
#
#

while [[ $# -gt 0 ]]
do
  case "$1" in

    "-h"|"-help"|"--help")
      usage
      exit 0
    ;;

    "--environment"|"--env")
      ENVIRONMENT=${2:-"_null"}
      if [[ $ENVIRONMENT == "_null" ]]
      then
        echo "Error: you must supply a valid environment with this parameter."
        exit 1
      else
        ENVIRONMENT_DEFINED=true
        shift;
        shift;
      fi
    ;;

    "--policy-group"|"--policygroup")
      POLICY_GROUP_NAME=${2:-"_null"}

      if [[ $POLICY_GROUP_NAME == "_null" ]]
      then
        echo "Error: you must supply a valid policy group name with this parameter."
        exit 1
      else
        POLICY_GROUP_DEFINED=true
        shift;
        shift;
      fi
    ;;

    "--policy-name"|"--policyname")
      POLICY_NAME=${2:-"_null"}
      if [[ $POLICY_NAME == "_null" ]]
      then
        echo "Error: you must supply a valid policy name with this parameter."
        exit 1
      else
        POLICY_NAME_DEFINED=true
        shift;
        shift;
      fi
    ;;

    # Last parameter is host name
    *)
      NODE_NAME=${1:-"_null"}
      if [[ $NODE_NAME == "_null" ]]
      then
        echo "The last parameter must be a node name."
        exit 1
      else
        shift
      fi
    ;;

  esac
done

# Verify that user has provided an environment, policy group and policy name
require_env_policy_group_and_name

# Verify that the hostname provided resolves to a known IP address
check_hostname "$NODE_NAME"

# If this host name is in $HOME/.ssh/known_hosts offer to remove it
# This lets us clear out old keys after a VM has been rebuilt
offer_clear_known_hosts

# Offer to delete existing Chef node and client objects
offer_clear_chef_objects

# Use ssh-copy id to deploy an ssh key on the remote node
deploy_root_ssh_key

# If the key was deployed OK, bootstrap it
if [[ $SSH_ERROR == 0 ]]
then
  # Minimal policy used to deploy
  BOOTSTRAP_POLICY="maxlab_node_bootstrap"

  echo
  echo "INITIAL KNIFE BOOTSTRAP TO GET CHEF DEPLOYED"
  echo "--------------------------------------------"
  santoku maxlab bootstrap ${NODE_NAME} \
    --connection-user root \
    --ssh-identity-file $SSH_KEY \
    --node-name ${NODE_NAME} \
    --environment ${ENVIRONMENT}

  # Now that the node is bootstrapped, set it to the policy for its services
  echo
  echo "SETTING ACTUAL POLICY FOR THE NODE"
  echo "----------------------------------"
  santoku maxlab node policy set ${NODE_NAME} ${POLICY_GROUP_NAME} ${POLICY_NAME}

  # Only do this in private homelab, not production
  # Make it easy to spin up new nodes, but limits node-specific key access
  echo
  echo "REFRESHING VAULT SECRETS TO INCLUDE THE NEW NODE"
  echo "------------------------------------------------"
  santoku maxlab vault refresh secret_postfix secret_maxlab_relay -M client
  santoku maxlab vault refresh secret_pxe secret_maxlab_pxe -M client

  # Now run chef-client on the node to provision services in the policy
  echo "EXCUTING CHEF-CLIENT ON NODE WITH POLICY $POLICY_NAME"
  ssh -i $SSH_KEY root@${NODE_NAME} "chef-client"

fi

#!/bin/bash
# THIS FILE DEPLOYED VIA CHEF 'station' cookbook

#
# Bootstrap a node in my maxlab home lab
#

VERSION="1.1.0"
VERSION_DATE="2020-01-07"

# List of valid names to the --base parameter
VALID_BASE_NAMES="vmlab, nas, proxmox"

function usage {
  echo "bootstrap-maxlab - Bootstrap a node in the maxlab home lab."
  echo
  echo "Syntax: bootstrap-maxlab --base <base_name> <HOSTNAME>"
  echo
  echo "Valid base names are $VALID_BASE_NAMES"
  echo
}

function host_check {
  # Resolve IP of this FQDN if possible
  HOST_IP=$(host $1 | awk '{print $4}')
  if [[ $? -gt 0 ]]
  then
    echo "Error: Can't resolve $NODE to an IP address"
    exit 1
  fi
}

# Global scope variables

BASE_DEFINED=false

#
HOST_IP=""

NODE=${1:-"_null"}
if [[ $NODE == "_null" ]]
then
  usage
  exit 1
else

  while [[ $# -gt 0 ]]
  do
    case "$1" in

      "-h"|"-help"|"--help")
        usage
        exit 0
      ;;

      "--base")
        BASE_NAME=${2:-"_null"}
        if [[ $BASE_NAME == "_null" ]]
        then
          echo "Error: you must supply a valid base name with this parameter"
        fi
        shift;
        shift;
      ;;

      # Last parameter is host name
      *)
        HOST_CHECK=$(host $1 > /dev/null 2>&1)
        if [[ $? != 0 ]]
        then
          echo "Error: $1 does not appear to be a recognized FQDN"
          exit 1
        else
          NODE="$1"
          shift
        fi
      ;;

    esac
  done

  case $BASE_NAME in

    "vmlab")
      # Initial runlist to execute after node has Chef deployed
      DEFAULT_RUNLIST='role[base_maxlab_vmlab]'
      BASE_DEFINED=true
    ;;

    "nas")
      # Initial runlist to execute after node has Chef deployed
      DEFAULT_RUNLIST='role[base_maxlab_nas]'
      BASE_DEFINED=true
    ;;

    "proxmox")
      # Initial runlist to execute after node has Chef deployed
      DEFAULT_RUNLIST='role[base_maxlab_proxmox]'
      BASE_DEFINED=true
    ;;

    *)
      echo "Error: Unknown base name $BASE_NAME specified."
      usage
      exit 1

  esac

  if [[ $BASE_DEFINED == false ]]
  then
    echo "Error: You need to specify a type of node with the --base parameter"
    usage
    exit 1
  fi

  # My personal lab key
  SSH_KEY="/home/maxwell/.ssh/maxwell-lab"

  # Lock to a specific version to avoid newer releases which I haven't validated
  # 2019-12 version
  CHEF_VERSION_PIN="15.4"

  # Set new node to this Chef environment
  DEFAULT_ENVIRONMENT="maxlab"

  # # Resolve IP of this FQDN if possible
  # HOST_IP=$(host $NODE | awk '{print $4}')
  # if [[ $? -gt 0 ]]
  # then
  #   echo "Error: Can't resolve $NODE to an IP address"
  #   exit 1
  # else

    # This will set HOST_IP or exit if an IP address can't be found
    host_check $NODE

    # Remove existing SSH keys for this node's IP (created before VM was rebuilt)
    if [[ ! -z ${HOST_IP} ]]
    then
      echo "Removing old entries for this host in $HOME/.ssh/known_hosts"
      sed -i 's/^.*'"${HOST_IP}"'.*$//g' $HOME/.ssh/known_hosts
      sed -i '/^$/d' $HOME/.ssh/known_hosts
    fi

    echo "Checking for old Chef server node object"
    NODE_SHOW_TEST=$(santoku maxlab node show ${NODE} > /dev/null 2>&1)
    RESULT=$?
    if [[ $RESULT == 0 ]]
    then

      # Delete existing node and client objects,
      # remove existing SSH key from $HOME/known_hosts file
      read -p "Would you like to erase ${NODE} first?" ERASE_YESNO
      if [[ $ERASE_YESNO == "y" || $ERASE_YESNO == "yes" ]]
      then
        echo "Deleting old Chef server node object for ${NODE}"
        santoku maxlab node delete ${NODE} --yes
        echo "Deleting old Chef server client object for ${NODE}"
        santoku maxlab client delete ${NODE} --yes
      fi
    fi

    # Deploy personal SSH key
    ssh-copy-id -i $SSH_KEY root@${NODE}

    # If the key was deployed OK, bootstrap it
    if [[ $? == 0 ]]
    then
      # Bootstrap with Chef using santoku to point to a specific config file
      santoku maxlab bootstrap ${NODE} \
        --connection-user root \
        --ssh-identity-file $SSH_KEY \
        --node-name ${NODE} \
        --bootstrap-version "$CHEF_VERSION_PIN" \
        --environment "$DEFAULT_ENVIRONMENT" \
        --run-list "$DEFAULT_RUNLIST"
    fi
  fi
fi
